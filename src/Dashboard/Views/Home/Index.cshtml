@{
    ViewData["Title"] = "Events";

    // TODO: Lista på senast körda
    // TODO: Kunna avbryta
    // TODO: Local storage för vilka tester som körts/är aktiv
}

<div>
    <button class="button is-primary" onclick="Tests.start()">Apa</button>
</div>

@*<progress id="progress" class="progress is-hidden" value="0" max="100"></progress>*@

<div id="tests">
    <nav class="panel">
        <p class="panel-heading">
            Test result
        </p>
        <div class="panel-block">
            <p class="control has-icons-left">
                <input class="input" type="text" placeholder="Search">
                <span class="icon is-left">
                    <i class="fas fa-search" aria-hidden="true"></i>
                </span>
            </p>
        </div>
        @*<p class="panel-tabs">
            <a class="is-active">All</a>
            <a>Public</a>
            <a>Private</a>
            <a>Sources</a>
            <a>Forks</a>
        </p>*@
        <div class="panel-block">
            <nav class="breadcrumb" aria-label="breadcrumbs">
                <ul>
                    <li><a href="#">Root</a></li>
                    <li class="is-active"><a href="#">Test 1</a></li>
                    @*<li><a href="#">Documentation</a></li>
                    <li><a href="#">Components</a></li>
                    <li class="is-active"><a href="#" aria-current="page">Breadcrumb</a></li>*@
                </ul>
            </nav>
        </div>
        <a class="panel-block is-flex">
            <span class="panel-icon is-flex is-flex-grow-0"><i class="fas fa-vial" aria-hidden="true"></i></span>
            <span class="is-flex is-flex-grow-2">..</span>
            <span class="text-right is-flex is-flex-grow-0 is-justify-content-center" style="width:2rem"><i class="fas fa-spinner fa-spin has-text-info"></i></span>
        </a>
        <a class="panel-block is-flex">
            <span class="panel-icon is-flex is-flex-grow-0"><i class="fas fa-vial" aria-hidden="true"></i></span>
            <span class="is-flex is-flex-grow-2">test 1 A</span>
            <span class="text-right is-flex is-flex-grow-0 is-justify-content-center" style="width:2rem"><i class="fas fa-spinner fa-spin has-text-info"></i></span>
        </a>
        <a class="panel-block is-flex">
            <span class="panel-icon is-flex is-flex-grow-0"><i class="fas fa-vial" aria-hidden="true"></i></span>
            <span class="is-flex is-flex-grow-2">test 1 B</span>
            <span class="text-right is-flex is-flex-grow-0 is-justify-content-center" style="width:2rem"><i class="fas fa-times has-text-danger-dark"></i></span>
        </a>
        <a class="panel-block is-flex">
            <span class="panel-icon is-flex is-flex-grow-0"><i class="fas fa-vial" aria-hidden="true"></i></span>
            <span class="is-flex is-flex-grow-2">test 1 C</span>
            <span class="text-right is-flex is-flex-grow-0 is-justify-content-center" style="width:2rem"><i class="fas fa-check has-text-success-dark"></i></span>
        </a>
    </nav>
</div>

<script src="~/js/signalr/dist/browser/signalr.min.js"></script>

<script>
    $ = (selector) => {
        const result = document.querySelectorAll(selector);
        if (result.length === 0) return null;
        if (result.length === 1) return result[0];
        return Array.from(result);
    }

    const Tests = (() => {
        // SignalR
        var connection = new window.signalR.HubConnectionBuilder().withUrl("/testsHub").build();
        connection.start().then(function () { }).catch(function (err) { return console.error("Connection error", err.toString()); });

        // Helper: Progress
        const setProgressValue = (testId, value) => {
            const progressElement = $(`#progress-${testId}`);
            if (progressElement) progressElement.setAttribute("value", value);
        }

        // Polling
        let activeIntervals = [],
            pollingEndsAt = [];
        const pollingInterval = 1000,
            maxPollSeconds = 3; // TODO: 120?

        const endPoll = (testId) => {
            clearInterval(activeIntervals[testId]);
            pollingEndsAt[testId] = null;
        };
        const poll = (testId, endPollingAt) => {
            pollingEndsAt[testId] = endPollingAt;
            activeIntervals[testId] = setInterval(function () {
                if (!activeIntervals[testId] || !pollingEndsAt[testId] || new Date > pollingEndsAt[testId]) {
                    endPoll(testId);
                }
                console.log("pinging");
                connection.invoke("UpdateStatus", testId);

                let secondsLeft = (endPollingAt.getTime() - (new Date).getTime()) / 1000;
                if (secondsLeft < 0) secondsLeft = 0;
                //$(`#progress-${testId}`).classList.remove("is-hidden");
                setProgressValue(testId, 100 - Math.ceil(100 * secondsLeft / maxPollSeconds));

            }, pollingInterval);
        };

        // Helper: Storage
        const getStoredTests = () => {
            const testContextsString = sessionStorage.getItem("testContexts");
            if (!testContextsString) return null;
            return JSON.parse(testContextsString);
        }

        const addStoredTest = (testId, endPollingAt) => {
            let testContexts = getStoredTests();
            if (!testContexts) testContexts = [];
            testContexts.push({ testId: testId, endPollingAt: endPollingAt });
            sessionStorage.setItem("testContexts", JSON.stringify(testContexts));
        }


        // Rendering
        const fullRender = (test, activeTestId) => {
            console.log("fullRender", test)
            const elementId = `test-${test.Id}`;
            let html = `<div id="${elementId}">`;
            html += `<progress id="progress-${test.Id}" class="progress" value="0" max="100"></progress>`;
            html += "<div>TEST " + test.Name + "</div>";

            html += "</div>";
            const testElement = document.createElement("div");
            testElement.setAttribute("id", elementId);
            testElement.innerHTML = html;
            $("#tests").append(testElement);
        }

        const renderTest = (test) => {
            // Full render if not present
            if (!document.querySelector(`#test-${test.Id}`)) fullRender(test, test.Id);

            // TODO: update state
        }

        // Events
        const testChanged = (test) => {
            console.log("TestChanged", test);
            renderTest(test);
        };
        connection.on("TestChanged", testChanged);

        // Helper: Call dashboard API
        const callApi = (method, url, callbacks) => {
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                if (xhr.readyState !== 4) return;
                if (xhr.status >= 200 && xhr.status < 300) {
                    if (callbacks && callbacks.ok) callbacks.ok(xhr);
                } else {
                    if (callbacks && callbacks.error) callbacks.error(xhr);
                }
                if (callbacks && callbacks.always) callbacks.always(xhr);
            };
            xhr.open(method, url);
            xhr.send();
        }

        // Exposed methods
        return {
            maybeResume: () => {
                const testContexts = getStoredTests();
                console.log(testContexts);
                if (!testContexts) return;
                testContexts.forEach((testContext) => {
                    const endTime = new Date(testContext.endPollingAt);
                    if (new Date < endTime) {
                        poll(testContext.testId, endTime);
                    }
                });
            },

            start: () => {
                // Start the test. A callback on "TestChanged" will happen.
                callApi("POST", "/api/Tests/Start",
                    {
                        ok: (xhr) => {
                            const testId = xhr.response;
                            const endPollingAt = new Date((new Date).getTime() + maxPollSeconds * 1000);
                            poll(testId, endPollingAt);
                            addStoredTest(testId, endPollingAt);
                        },
                        error: (xhr) => { console.log("error", xhr.status, xhr.responseText); }
                    });
            }
        }
    })();

    Tests.maybeResume();
</script>