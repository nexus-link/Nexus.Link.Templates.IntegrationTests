@model Dictionary<string, Dashboard.Controllers.Stat>
@{
    ViewData["Title"] = "Graphs";
}

<nav class="level mt-2">
    <div class="level-left"></div>
    <div class="level-right">
        <button class="button ml-1" onclick="Site.resetEvents()">Reset</button>
        <button class="button ml-1" onclick="Site.sendTestEvent()">Send test event</button>
    </div>
</nav>

<canvas id="myChart" width="400" height="400"></canvas>

@section Scripts
{

    <script>
        const SCALE_INCREMENT = 5;

        const initialLabels = [
            @foreach (var label in Model.Keys)
            {
                @Html.Raw($"'{label}',")
            }
        ];
        const initialData = [
            @foreach (var value in Model.Values)
            {
                @Html.Raw($"{value.Count},")
            }
        ];

        var ctx = document.getElementById("myChart").getContext("2d");
        var myChart = new Chart(ctx, {
            type: "horizontalBar",
            data: {
                labels: initialLabels,
                datasets: [{
                    label: "# of events",
                    data: initialData,
                    backgroundColor: [
                        "rgba(255, 99, 132, 0.2)",
                        "rgba(54, 162, 235, 0.2)",
                        "rgba(255, 206, 86, 0.2)",
                        "rgba(75, 192, 192, 0.2)",
                        "rgba(153, 102, 255, 0.2)",
                        "rgba(255, 159, 64, 0.2)"
                    ],
                    borderColor: [
                        "rgba(255, 99, 132, 1)",
                        "rgba(54, 162, 235, 1)",
                        "rgba(255, 206, 86, 1)",
                        "rgba(75, 192, 192, 1)",
                        "rgba(153, 102, 255, 1)",
                        "rgba(255, 159, 64, 1)"
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    xAxes: [{
                        ticks: {
                            beginAtZero: true,
                            stepSize: 1,
                            suggestedMax: SCALE_INCREMENT
                        }
                    }]
                }
            }
        });

        var connection = new signalR.HubConnectionBuilder().withUrl("/eventsHub").build();

        connection.on("NewEventsStats", function (labels, data) {
            console.log("NewEventsStats", labels, data);

            myChart.data.labels = labels;
            myChart.data.datasets[0].data = data;
            myChart.options.scales.xAxes[0].ticks.suggestedMax = calculateXMax(data);
            myChart.update();
        });

        var calculateXMax = function (data) {
            if (data.length === 0) return 5;
            const copy = [...data];
            copy.sort();
            const maxData = copy[copy.length - 1];
            return Math.floor(maxData / SCALE_INCREMENT) * SCALE_INCREMENT + SCALE_INCREMENT;
        }

        connection.start().then(function () {

            })
            .catch(function (err) {
                return console.error(err.toString());
            });

    </script>
}
